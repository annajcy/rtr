@startuml
hide empty members

' 全局 RHI 渲染资源结构体
class RHI_global_render_resource {
    ' 封装渲染系统所需全局 RHI 对象
    +RHI_device
    +RHI_window
    +RHI_renderer
    +RHI_screen_buffer
    +RHI_memory_binder
    +RHI_pipeline_state
    +RHI_texture_builder
}


' Render_pass 相关的辅助结构体
class Execution_context {

}

class Render_object {

}

class Render_resource_flow {
   
}
Render_resource_flow *-- "n" Render_object : include

' Render_pass 抽象基类
abstract class Render_pass {
   
    -m_rhi_global_render_resource: RHI_global_render_resource&
    +Render_pass(rhi_global_render_resource: RHI_global_render_resource&)
    +<<abstract>> execute(): void
}
' Render_pass 使用 Execution_context 和 Render_resource_flow
Render_pass ..> Execution_context : use
Render_pass ..> Render_resource_flow : use
' Render_pass 持有对 RHI_global_render_resource 的引用
Render_pass "1" -- "*" RHI_global_render_resource : <<引用>>

' 渲染流程上下文
class Render_tick_context {
   
}

' 资源管理器
class Resource_manager {

}

' Render_pipeline 抽象基类
abstract class Render_pipeline {
    
    -m_resource_manager: Resource_manager
    -m_render_passes: List<shared_ptr<Render_pass>>
    --
    +<<abstract>> execute(context: const Render_tick_context): void
    +<<abstract>> initUBO(): void
    +<<abstract>> updateUBO(context: const Render_tick_context): void

    +init_renderpass(): void
    +update_renderpass(context: const Render_tick_context): void
    +update_pipeline_resource(context: const Render_tick_context): void
}
' Render_pipeline 组合 Resource_manager
Render_pipeline *-- Resource_manager : manage
' Render_pipeline 聚合 Render_pass 实例
Render_pipeline "1" -- "n" Render_pass : aggregate
' Render_pipeline 使用 Render_tick_context
Render_pipeline ..> Render_tick_context : use

' Render_system 最高层入口和管理器
class Render_system {
    -m_global_render_resource: RHI_global_render_resource
    -m_render_pipeline: shared_ptr<Render_pipeline>
    +Render_system(rhi_device: shared_ptr<RHI_device>, rhi_window: shared_ptr<RHI_window>)
    --
    +setRenderPipeline(pipeline: shared_ptr<Render_pipeline>): void
    +update(context: const Render_tick_context): void
}
' Render_system 组合 RHI_global_render_resource
Render_system *-- RHI_global_render_resource 
' Render_system 聚合 Render_pipeline (可通过 set_render_pipeline 替换)
Render_system o-- Render_pipeline : aggregate 
' Render_system 依赖 RHI_device 和 RHI_window (用于构造函数)
Render_system ..> RHI_device 
Render_system ..> RHI_window 
' Render_system 使用 Render_tick_context (在 tick 方法中)
Render_system ..> Render_tick_context : use (in frame update)

@enduml